// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContainerReceiverClient is the client API for ContainerReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerReceiverClient interface {
	CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type containerReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerReceiverClient(cc grpc.ClientConnInterface) ContainerReceiverClient {
	return &containerReceiverClient{cc}
}

func (c *containerReceiverClient) CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Container.ContainerReceiver/CancelTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerReceiverServer is the server API for ContainerReceiver service.
// All implementations must embed UnimplementedContainerReceiverServer
// for forward compatibility
type ContainerReceiverServer interface {
	CancelTask(context.Context, *CancelTaskRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedContainerReceiverServer()
}

// UnimplementedContainerReceiverServer must be embedded to have forward compatible implementations.
type UnimplementedContainerReceiverServer struct {
}

func (UnimplementedContainerReceiverServer) CancelTask(context.Context, *CancelTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTask not implemented")
}
func (UnimplementedContainerReceiverServer) mustEmbedUnimplementedContainerReceiverServer() {}

// UnsafeContainerReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerReceiverServer will
// result in compilation errors.
type UnsafeContainerReceiverServer interface {
	mustEmbedUnimplementedContainerReceiverServer()
}

func RegisterContainerReceiverServer(s grpc.ServiceRegistrar, srv ContainerReceiverServer) {
	s.RegisterService(&ContainerReceiver_ServiceDesc, srv)
}

func _ContainerReceiver_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerReceiverServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Container.ContainerReceiver/CancelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerReceiverServer).CancelTask(ctx, req.(*CancelTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainerReceiver_ServiceDesc is the grpc.ServiceDesc for ContainerReceiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerReceiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Container.ContainerReceiver",
	HandlerType: (*ContainerReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelTask",
			Handler:    _ContainerReceiver_CancelTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "container.proto",
}
