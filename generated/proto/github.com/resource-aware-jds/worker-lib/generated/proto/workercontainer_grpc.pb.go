// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/workercontainer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerContainerClient is the client API for WorkerContainer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerContainerClient interface {
	SendTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type workerContainerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerContainerClient(cc grpc.ClientConnInterface) WorkerContainerClient {
	return &workerContainerClient{cc}
}

func (c *workerContainerClient) SendTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/WorkerContainer.WorkerContainer/SendTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerContainerServer is the server API for WorkerContainer service.
// All implementations must embed UnimplementedWorkerContainerServer
// for forward compatibility
type WorkerContainerServer interface {
	SendTask(context.Context, *Task) (*emptypb.Empty, error)
	mustEmbedUnimplementedWorkerContainerServer()
}

// UnimplementedWorkerContainerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerContainerServer struct {
}

func (UnimplementedWorkerContainerServer) SendTask(context.Context, *Task) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTask not implemented")
}
func (UnimplementedWorkerContainerServer) mustEmbedUnimplementedWorkerContainerServer() {}

// UnsafeWorkerContainerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerContainerServer will
// result in compilation errors.
type UnsafeWorkerContainerServer interface {
	mustEmbedUnimplementedWorkerContainerServer()
}

func RegisterWorkerContainerServer(s grpc.ServiceRegistrar, srv WorkerContainerServer) {
	s.RegisterService(&WorkerContainer_ServiceDesc, srv)
}

func _WorkerContainer_SendTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerContainerServer).SendTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkerContainer.WorkerContainer/SendTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerContainerServer).SendTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerContainer_ServiceDesc is the grpc.ServiceDesc for WorkerContainer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerContainer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WorkerContainer.WorkerContainer",
	HandlerType: (*WorkerContainerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTask",
			Handler:    _WorkerContainer_SendTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/workercontainer.proto",
}
