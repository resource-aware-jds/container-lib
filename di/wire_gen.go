// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/resource-aware-jds/container-lib/config"
	"github.com/resource-aware-jds/container-lib/facade"
	"github.com/resource-aware-jds/container-lib/handler"
	"github.com/resource-aware-jds/container-lib/pkg/grpc"
	"github.com/resource-aware-jds/container-lib/pkg/taskrunner"
	"github.com/resource-aware-jds/container-lib/service/taskrunnersvc"
)

// Injectors from wire.go:

func InitializeApplication(containerHandlerFunction facade.ContainerHandlerFunction) (App, func(), error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return App{}, nil, err
	}
	serverConfig := config.ProvideGRPCSocketServerConfig(configConfig)
	server, cleanup, err := grpc.ProvideGRPCServer(serverConfig)
	if err != nil {
		return App{}, nil, err
	}
	grpcHandler, err := handler.ProvideGRPCHandler(server, containerHandlerFunction)
	if err != nil {
		cleanup()
		return App{}, nil, err
	}
	poolConfig := config.ProvideTaskRunnerPoolConfig(configConfig)
	pool, err := taskrunner.ProvideTaskRunnerPool(poolConfig)
	if err != nil {
		cleanup()
		return App{}, nil, err
	}
	clientConfig := config.ProvideGRPCSocketClientConfig(configConfig)
	client, err := grpc.ProvideClient(clientConfig)
	if err != nil {
		cleanup()
		return App{}, nil, err
	}
	service, cleanup2 := taskrunnersvc.ProvideService(configConfig, pool, client, containerHandlerFunction)
	app := ProvideApp(server, grpcHandler, service)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
